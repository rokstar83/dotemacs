#+TITLE: Emacs configuration
#+AUTHOR: Tom Hartman
#+PROPERTY: header-args:emacs-lisp :tangle ./init-test.el

* General Setup

** Preamble
This section contains the license and commentary for this elisp file. This both makes my elisp linter happy and also makes me happy. Or at least makes me feel like a responsible programmer.

*** License and Information
This configuration uses the GPL v2 license.

#+begin_src emacs-lisp
;;; init.el --- Emacs configuration and initialization file

;; Copyright (c) 2020 Thomas Hartman (thomas.lees.hartman@gmail.com)

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License
;; as published by the Free Software Foundation; either version 2
;; of the License, or the License, or (at your option) any later
;; version.

;; This program is distributed in the hope that it will be useful
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
#+end_src


*** Commentary
#+begin_src emacs-lisp
;;; Commentary:
;; This is my Emacs configuration file.There are many like it but this one is mine.
;;
;; There is a lot of code in here that was lifted or modified from
;; other sources.Below is a non-exhaustive list of them:
;;
;; System Crafters Emacs from Scratch: https://github.com/daviwil/emacs-from-scratch
;;

;; 
#+end_src


*** And the Code Begins... Nowowowowoowowowowow
#+begin_src emacs-lisp
;;; Code:
#+end_src


** Bars
 Remove the menu, scroll, and toolbar. Remove the basic line number
 mode as well.

 #+begin_src emacs-lisp output

 (menu-bar-mode -1)
 (scroll-bar-mode -1)
 (tool-bar-mode -1)
 (global-linum-mode t)

 #+end_src


** Frist Buffer

Go directly to scratch buffer, do not pass go
#+begin_src emacs-lisp output

(setq startup-screen-inhibit-startup-screen t)

#+end_src


** Package Setup
Initialize the package repositories. Org mode in mainline emacs can be behind the stable development curve so add that in, in addition to melpa.

Setup the use-package package as well for ease of package management and configuration

   #+begin_src emacs-lisp
;; Initialize package sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
			 ("org" . "https://orgmode.org/elpa/")
			 ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
   
   #+end_src


* Apperance
This section configures the overall apparance of emacs from fonts to themes, transpancy and other visual nicities.

** Font
Setup SauceCodePro from Nerd Font as the default font for buffers.

#+begin_src emacs-lisp
  
(add-to-list 'default-frame-alist '(font . "SauceCodePro Nerd Font Mono-8"))
 
#+end_src


** Theme
From the doom themes package use the doom-dracula theme

#+begin_src emacs-lisp

(use-package doom-themes
  :init (load-theme 'doom-dracula t))

#+end_src


** Transparency
A quick function to set the transparency of emacs when in window mode. I've found 80% to be the most comfortable.

#+begin_src emacs-lisp
(defun set-transparency (value)
  "Set the transparency `VALUE' of the frame window 0=transparent/100=opaque."
  (interactive "nTransparency Value 0 - 100: ")

  (set-frame-parameter (selected-frame) 'alpha value))
   
(set-transparency 80)
#+end_src


* Org Mode

** General
   #+begin_src emacs-lisp
   
(defun efs/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 1)
  (visual-line-mode 1))

(use-package org
  :pin org
  :hook (org-mode . efs/org-mode-setup)
  :config
  (setq org-ellipsis " â–¾")
  
  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t))

   #+end_src


** Babel
 
  #+begin_src emacs-lisp
   (setf org-src-preserve-indentation t)
   #+end_src


** Structure Templates

 #+begin_src emacs-lisp output

 (require 'org-tempo)
  
 (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
 (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
 (add-to-list 'org-structure-template-alist '("py" . "src python"))

 #+end_src
 

** Auto-tangle
This snippet adds a hook to org-mode buffers so that efs/org-babel-tangle-config gets executed each time such a buffer gets saved. This function checks to see if the file being saved is the Emacs.org file youâ€™re looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp
;; Automatically tangle our Emacs.org config file when we save it
(defun efs/org-babel-tangle-config ()
  (when (string-equal (file-name-directory (buffer-file-name))
                      (expand-file-name user-emacs-directory))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

#+end_src


** Center Org Buffers

We use visual-fill-column to center org-mode buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document. This is really a matter of personal preference so you can remove the block below if you donâ€™t like the behavior.

#+begin_src emacs-lisp
(defun efs/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . efs/org-mode-visual-fill))
#+end_src




* Magit
#+begin_src emacs-lisp
(use-package magit
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

;; NOTE: Make sure to configure a GitHub token before using this package!
;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
(use-package forge)
#+end_src


* Languages

** Emacs Lisp
#+begin_src emacs-lisp
(use-package paredit
  :config
  
  ;; slurping in a terminal doesn't quite work, so rebind keys so they do
  (unless (display-graphic-p)
    (define-key paredit-mode-map (kbd ",") 'paredit-backward-slurp-sexp)
    (define-key paredit-mode-map (kbd ".") 'paredit-forward-slurp-sexp))

  ;; turn paredit on for all lispy modes
  (add-hook 'emacs-lisp-mode-hook 'paredit-mode)
  (add-hook 'lisp-mode-hook 'paredit-mode)
  (add-hook 'scheme-mode-hook 'paredit-mode)
  (add-hook 'ielm-mode-hook 'paredit-mode)

  ;; turn on paredit for Cask files too
  (add-to-list 'auto-mode-alist '("Cask" . paredit-mode)))
#+end_src


** Python


* Closing

#+begin_src emacs-lisp
;;; init.el ends here
#+end_src

